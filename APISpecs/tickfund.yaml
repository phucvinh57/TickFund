openapi: 3.0.0
info:
  title: TickFund API Gateway
  description: A scalable and re-use service
  version: 1.0.0

servers:
  - url: http://127.0.0.1:8081
    description: TF service

tags:
  - name: transactions
    description: API for transactions
  - name: categories
    description: API for categories
  - name: plannings
    description: API for plannings
  - name: statistics
    description: API for statistics
  - name: logs
    description: API for logs
  - name: accounts
    description: API for TickLab's account info
  - name: roles
    description: API for access control
  - name: user
    description: API for personal user
    
paths:
  /roles:
    post:
      summary: Create a new role by name
      tags:
        - roles
      requestBody:
        content:
          application/json:
            schema: 
              type: string
              example: "Giám sát quỹ lab"
      responses:
        200:
          description: Create role successfully
          content:
            application/json:
              schema:
                type: integer
                description: Id of a created role
                example: 4
    put:
      summary: Update role name
      tags:
        - roles
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                ID: 
                  type: integer
                  example: 4
                newName:
                  type: string
                  example: "Giám sát quỹ lab"
      responses:
        200:
          description: Update role successfully
          content:
            application/json:
              schema:
                type: integer
                description: Id of a updated role
                example: 4
  /roles?id={id}:
    delete: 
      summary: Summary fund by each period in the given range time
      tags:
        - roles
      parameters:
        - in: query
          name: option
          required: true
          schema:
            type: integer
            example: 4
      responses:
        200:
          description: Delete role successfully & return role id
          content:
            application/json:
              schema:
                type: integer
                example: 4

  # STATISTIC
  /stat/total?option={option}:
    get:
      deprecated: true
      summary: Summary fund by each period in the given range time
      tags:
        - statistics
      parameters:
        - in: query
          name: option
          required: true
          schema:
            $ref: "#/components/schemas/Statistic.Filter"

      responses:
        200:
          description: Return two arrays of incomes and expenses
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistic.Overview"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    
  /stat/highest?option={option}:
    get:
      deprecated: true
      tags:
        - statistics
      summary: Get data for bar chart
      parameters:
        - in: query
          name: option
          required: true
          schema:
            $ref: "#/components/schemas/Statistic.Filter"
      responses:
        200:
          description: Return 5 categories which has the highest amount of incomes and expenses
          content:
            application/json:
              schema:
                type: object
                properties:
                  incomes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Statistic.PieChart.Category"
                  expenses:
                    type: array
                    items:
                      $ref: "#/components/schemas/Statistic.PieChart.Category"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  # TRANSACTION
  /transactions:
    post:
      summary: Add a new transaction
      tags:
        - transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction.New"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: "Create transaction successfully"
                  id:
                    type: string
                    example: "1659171651406-0"
                  
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /transactions/{id}:
    get:
      summary: Get more detail (notes and attachments) of a transaction by given ID
      tags:
        - transactions
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: "1659543244836-nhancdt"
          description: Transaction ID
      responses:
        200:
          description: New Category successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction.RowData.Addition"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /transactions/query:
    get:
      summary: Get transaction list by some pre-condition
      tags:
        - transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"
      responses:
        200:
          description: Retrieve successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction.RowData.Addition"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  # CATEGORIES
  /categories:
    post:
      summary: Add a new category
      tags:
        - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        200:
          description: New Category successfully added
        404:
          description: Not Found
        500:
          description: Internal Server Error
    get:
      summary: Get all categories
      tags:
        - categories
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        400:
          description: Not Found
        500:
          description: Internal Server Error

  /categories/{name}:
    delete:
      summary: Delete an exist category
      tags:
        - categories
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
            example: "Tien dien"
          description: Ten danh muc
      responses:
        200:
          description: Success
        404:
          description: Not Found
        500:
          description: Internal Server Error
          
    put:
      summary: Edit a category name
      tags:
        - categories
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
            example: "Tien dien"
          description: Ten danh muc
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        200:
          description: Success
        404:
          description: Not Found
        500:
          description: Internal Server Error
  /accounts:
    get:
      summary: Get a list of all accounts
      tags:
        - accounts
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  title: User
                  properties:
                    ID:
                      type: string
                      example: 1915940
                    name: 
                      type: string
                      example: Nguyễn Phúc Vinh
                    username:
                      type: string
                      example: vinh.np
                    expertise:
                      $ref: "#/components/schemas/Expertise"
                    role:
                      type: object
                      properties:
                        ID:
                          type: integer
                          example: 15
                        name: 
                          type: string
                          example: "Thành viên"
                    active:
                      type: boolean
                      example: true
                    department:
                      $ref: "#/components/schemas/Department"
        400:
          description: Not Found
        500:
          description: Internal Server Error

    post:
      summary: Add a new account
      tags:
        - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account.Detail"
      responses:
        200:
          description: New User successfully added
        400:
          description: Not Found
        500:
          description: Internal Server Error
    put:
      summary: Edit
      tags:
        - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account.Detail"
      responses:
        200:
          description: Success
        400:
          description: Not Found
        500:
          description: Internal Server Error

  /user:
    get:
      servers:
        - url: finance.ticklab.vn
      summary: Get my user
      tags:
        - user
      responses:
        200:
          description: Return user's info, include user's role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUserInfo"
  /user/password:
    put:
      summary: Update user's password
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPass:
                  type: string
                  example: "******"
                newPass:
                  type: string
                  example: "******"
                confirmedNewPass:
                  type: string
                  example: "******"
      responses:
        200:
          description: Update password successfully
  /user/avatar:
    put:
      summary: Update user's avatar
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                avatarUrl:
                  type: string
                  example: http://127.0.0.1:3002/public/as1s6Dc69kAhsd.jpeg
      responses:
        200:
          description: Update user avatar successfully
  /user/info:
    put:
      summary: Update user's password
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPass:
                  type: string
                  example: "******"
                newPass:
                  type: string
                  example: "******"
                confirmedNewPass:
                  type: string
                  example: "******"
      responses:
        200:
          description: Update password successfully

  # PLANNING
  /plannings:
    post:
      summary: Add a new planning
      tags:
        - plannings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Planning.New"

      responses:
        200:
          description: Add new planning successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: "Create planning successfully"
                  id:
                    type: string
                    example: "1659171651406-0"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /plannings/{id}:
    get:
      summary: Get more detail (notes and attachments) of a transaction by given ID
      tags:
        - plannings
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: "1659171651406-0"
          description: Planning ID
      responses:
        200:
          description: Get a planning by provided ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Planning.RowData.Addition"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    put:
      summary: Update a planning which has a given ID
      tags:
        - plannings
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: "#1d34ae"
          description: Planning ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Planning.RowData.Addition"

      responses:
        200:
          description: Update successfully
        404:
          description: Not Found
        500:
          description: Internal Server Error
    delete:
      summary: Delete a planning by given id
      tags:
        - plannings
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: "1659171651406-0"
          description: Planning ID
      responses:
        200:
          description: Delete planning successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: "Delete planning successfully"
                  id:
                    type: string
                    example: "1659171651406-0"
        404:
          description: Not Found
        500:
          description: Internal Server Error
  
  /plannings/query:
    get:
      summary: Get transaction list by some pre-condition
      tags:
        - plannings
      parameters:
        - in: query
          name: q
          schema:
            $ref: "#/components/schemas/Query"
            default: {}
          required: false
          description: Object of conditions
      responses:
        200:
          description: Retrieve successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Planning.RowData.Addition"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  # LOGS
  /logs?q={query}:
    get:
      deprecated: true
      summary: Get log list by some pre-condition
      tags:
        - logs
      parameters:
        - in: query
          name: q
          schema:
            $ref: "#/components/schemas/Query"
            default: {}
          required: false
          description: Object of conditions
      responses:
        200:
          description: List of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Log"
        404:
          description: Not Found
        500:
          description: Internal Server Error

components:
  schemas:
    CurrentUserInfo:
      type: object
      properties:
        ID:
          type: string
          example: 1915940
        username:
          type: string
          example: vinh.np
        email:
          type: string
          example: npvinh0507@gmail.com
        name:
          type: string
          example: Nguyễn Phúc Vinh
        avatarUrl:
          type: string
          example: "https://cdn.ticklab.com"
        phone:
          type: string
          example: 0373395726
        birthday:
          type: string
          example: "2001-07-05"
        expertise:
          $ref: "#/components/schemas/Expertise"
        department:
          $ref: "#/components/schemas/Department"
        role:
          $ref: "#/components/schemas/Role"
    
    Role:
      type: object
      properties:
        ID:
          type: number
          example: 1
        name:
          type: string
          example: Thủ quỹ
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
    
    Resource:
      type: object
      properties:
        ID:
          type: number
          example: 1
        name:
          type: string
          example: Giao dịch
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
    
    Action:
      type: object
      properties:
        ID:
          type: number
          example: 1
        name:
          type: string
          example: Tạo giao dịch mới
        permit:
          type: boolean
          example: true


    Category:
      type: object
      properties:
        name:
          type: string
          example: Tiền điện
        type:
          type: string
          enum: [Thu, Chi]
          example: Thu
        icon:
          type: string
          example: :)

    Transaction.New:
      type: object
      description: Data format for create a new transaction
      properties:
        amount:
          type: integer
          format: int64
          example: 300000
        history:
          type: string
          example: "2022-06-01"
        category_name:
          type: string
          example: Tiền điện
        user_id:
          type: string
          example: "nhancdt"
        creator_id:
          type: string
          example: "nhancdt"
        note:
          type: string
          example: "Tiền điện TickLab"
        attachments:
          $ref: "#/components/schemas/Attachments"

    Transaction.RowData:
      type: object
      description: Data for displaying a transaction on table
      properties:
        id:
          type: string
          example: "#10ac6we"
        user:
          $ref: "#/components/schemas/Account.Basic"
        time:
          type: string
          example: "2022/03/30 06:24:24"
        amount:
          type: number
          example: 300000
        category:
          $ref: "#/components/schemas/Category"

    Transaction.RowData.Addition:
      type: object
      description: Get more details of a transaction
      properties:
        ID:
          type: string
          example: "1659543244836-nhancdt"
        amount:
          type: number
          example: 300000
        history:
          type: string
          example: "2022-06-01"
        note:
          type: string
          example: "Tiền nhà tháng 6"
        category_name:
          type: string
          example: "Tiền điện"
        category_type:
          type: string
          example: "expense"
        user_id:
          type: string
          example: "nhancdt"
        creator_id:
          type: string
          example: "nhancdt"
        created_at:
          type: string
          example: "2022-08-10T17:46:17"
        attachments:
          $ref: "#/components/schemas/Attachments"

    Planning.New:
      type: object
      required:
        - category
        - amount
        - startDate
        - isRepeat
      properties:
        category_name:
          type: string
          example: "Tiền điện"
        amount:
          type: integer
          example: 2000000
        user_id:
          type: string
          example: "nhancdt"
        is_repeat:
          type: boolean
          example: true
        start_date:
          type: string
          example: "2022-10-25"
        repeat:
          $ref: "#/components/schemas/Planning.Repetition"

    Planning.Update:
      type: object
      required:
        - category
        - amount
        - startDate
        - isRepeat
      properties:
        category:
          $ref: "#/components/schemas/Category"
        amount:
          type: integer
          example: 2000000
        userId:
          type: string
          example: "#343a40"
        isRepeat:
          type: boolean
          example: true
        startDate:
          type: string
          example: "2022-10-05 15:30"
        repeat:
          $ref: "#/components/schemas/Planning.Repetition"

    Planning.RowData:
      type: object
      properties:
        id:
          type: string
          example: "#343a40"
        category:
          $ref: "#/components/schemas/Category"
        amount:
          type: integer
          example: 150000
        startDate:
          type: string
          example: "2022-04-07"

    Planning.RowData.Addition:
      type: object
      properties:
        ID:
          type: string
          example: "1659543244836-nhancdt"
        amount:
          type: number
          example: 200000
        countdown:
          type: number
          example: 4
        start_date:
          type: string
          example: "2022-06-01"
        next_due:
          type: string
          example: "2022-09-01"
        user_id:
          type: string
          example: "nhancdt"
        is_repeat:
          type: boolean
          example: true
        cycle_unit:
          type: string
          enum: ["day", "week", "month", "year"]
        category_name:
          type: string
          example: "Tiền điện"
          
    Planning.Repetition:
      type: object
      properties:
        cycle:
          type: string
          enum: ["day", "week", "month", "year"]
        countdown:
          type: integer
          example: 10

    User:
      type: object
      description: Display basic personal data of a user
      properties:
        name:
          type: string
          example: Cu Do Thanh Nhan
        username:
          type: string
          example: cudothanhnhan
        avatarUrl:
          type: string
          example: "https://cdn.ticklab.com"

    Account.Basic:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            ID:
              type: string
              example: 1915940

    Account.Detail:
      allOf:
        - $ref: "#/components/schemas/Account.Basic"
        - type: object
          description: all information of a user
          properties:
            expertise:
              $ref: "#/components/schemas/Expertise"
            roleId:
              type: integer
              example: 1
            birthday:
              type: string
              format: date
              example: '2001-06-01'
            email:
              type: string
              pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
              example: email@gmail.com
            phone:
              type: string
              pattern: '(84|0[3|5|7|8|9])+([0-9]{8})\b'
              example: "0915654321"
            personalLinks:
              type: array
              items:
                type: string
                example: "https://www.facebook.com/"
            departmentId:
              type: integer
              example: 1

    Query:
      type: object
      properties:
        order:
          type: object
          properties:
            field:
              type: string
              example: history
            type:
              type: string
              enum: ["ASC", "DESC"]
              default: "DESC"
        size:
          type: object
          properties:
            page_number:
              type: integer
              example: 1
            page_size:
              type: integer
              example: 20
        op:
          type: string
          enum: ["must", "should"]
          default: "must"
        filters:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Query.Range"
              - $ref: "#/components/schemas/Query.Range.Date"
              - $ref: "#/components/schemas/Query.Range.DateTime"
              - $ref: "#/components/schemas/Query.Equal"
              - $ref: "#/components/schemas/Query.NotEqual"

    Department:
      type: object
      properties:
        ID:
          type: integer
          example: 1
        name:
          type: string
          example: "Ban phát triển dự án"
    Expertise:
      type: string
      enum: ["IT", "ME", "DEE"]

    Query.Range:
      type: object
      properties:
        type: 
          type: string
          example: "range"
        field:
          type: string
          example: "amount"
        lower_bound:
          type: integer
          example: 30000
        uppper_bound:
          type: integer
          example: 40000

    Query.Range.Date:
      type: object
      properties:
        type: 
          type: string
          example: "range"
        field:
          type: string
          example: "history"
        lower_bound:
          type: string
          example: "2022-01-01"
        format:
          type: string
          example: "yyyy-MM-dd"

    Query.Range.DateTime:
      type: object
      properties:
        type: 
          type: string
          example: "range"
        field:
          type: string
          example: "create_at"
        lower_bound:
          type: string
          example: "2022-01-01T19:08:10.145Z"
        format:
          type: string
          example: "yyyy-MM-dd'T'hh:mm:ss.SSSX"

    Query.Equal:
      type: object
      properties:
        type: 
          type: string
          example: "equal"
        field:
          type: string
          example: "category_name"
        value:
          type: string
          example: "Tiền điện" 


    Query.NotEqual:
      type: object
      properties:
        type: 
          type: string
          example: "not_equal"
        field:
          type: string
          example: "user_id"
        value:
          type: string
          example: "nhancdt"   

    Attachment:
      type: object
      properties: 
        ID:
          type: string
          example: "1659543256692-0"
        name:
          type: string
          example: "hoadon.txt"
        path:
          type: string
          example: "http://tickfund.tl.vn:8081/1659543256692-0"

    Log:
      type: object
      required:
        - user
        - time
        - activity
      properties:
        user:
          $ref: "#/components/schemas/Account.Basic"
        time:
          type: string
          example: "2022/02/16 21:06:52"
        activity:
          $ref: "#/components/schemas/Log.Activity"

    Log.Activity:
      type: object
      required:
        - action
        - link
      properties:
        action:
          type: string
          example: Yeu cau giai ngan
        link:
          type: object
          properties:
            name:
              type: string
              example: mua may khoan
            link:
              type: string
              format: url
              example: https://api.tickfund.com/v1/plannings/343a40
    Statistic.Filter:
      type: object
      required:
        - include_planning
        - time_range
        - period
      properties:
        include_planning:
          type: boolean
          example: true
        time_range:
          type: object
          properties:
            start:
              type: string
              example: '2022/02/16'
            end:
              type: string
              example: '2022/07/01'
        period:
          type: string
          enum:
            - week
            - month
            - quarter
          example: month
    
    Statistic.Overview:
      type: object
      properties:
        incomes:
          type: array
          items:
            type: integer
          example: [3000000, 4950000, 3578000]
        expenses:
          type: array
          items:
            type: integer
          example: [156000, 790000, 1230000]

    Statistic.PieChart.Category:
      type: object
      required:
        - category
        - amount
      properties:
        category:
          type: string
          example: "Tien nha"
        amount:
          type: integer
          example: "3000000"

    Attachments:
      type: array
      items:
        type: object
        properties:
          path: 
            type: string
            example: "http://localhost:8081/1456"
          name:
            type: string
            example: "anhChupGiaoDich.jpg"
