openapi: 3.0.0
info:
  title: TickFund API Gateway
  description: A scalable and re-use service
  version: 1.0.0

servers:
  - url: https://api.tickfund.com/v1
    description: API Gateway
  - url: https://api.tickfund.com/
    description: API Gateway - test connection

tags:
  - name: transactions
    description: API for transactions
  - name: categories
    description: API for categories
  - name: plannings
    description: API for plannings
  - name: statistics
    description: API for statistics
  - name: logs
    description: API for logs
  - name: users
    description: API for user info

paths:
  # STATISTIC
  /stat/total?option={option}:
    get:
      summary: Summary fund by each period in the given range time
      tags:
        - statistics
      parameters:
        - in: query
          name: option
          required: true
          schema:
            $ref: "#/components/schemas/Statistic.Filter"

      responses:
        200:
          description: Return two arrays of incomes and expenses
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistic.Overview"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    
  /stat/highest?option={option}:
    get:
      tags:
        - statistics
      summary: Get data for bar chart
      parameters:
        - in: query
          name: option
          required: true
          schema:
            $ref: "#/components/schemas/Statistic.Filter"
      responses:
        200:
          description: Return 5 categories which has the highest amount of incomes and expenses
          content:
            application/json:
              schema:
                type: object
                properties:
                  incomes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Statistic.PieChart.Category"
                  expenses:
                    type: array
                    items:
                      $ref: "#/components/schemas/Statistic.PieChart.Category"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  # TRANSACTION
  /transactions/new:
    post:
      summary: Add a new transaction
      tags:
        - transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction.New"
      responses:
        200:
          description: New Transaction successfully added
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /transactions/{id}:
    get:
      summary: Get more detail (notes and attachments) of a transaction by given ID
      tags:
        - transactions
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: "#1d34ae"
          description: Transaction ID
      responses:
        200:
          description: New Category successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction.RowData.Addition"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /transactions?q={query}:
    get:
      summary: Get transaction list by some pre-condition
      tags:
        - transactions
      parameters:
        - in: query
          name: q
          schema:
            $ref: "#/components/schemas/Query"
            default: {}
          required: false
          description: Object of conditions
      responses:
        200:
          description: Retrieve successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction.RowData"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  # CATEGORIES
  /categories/new:
    post:
      summary: Add a new category
      tags:
        - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        200:
          description: New Category successfully added
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /categories/{name}:
    delete:
      summary: Delete an exist category
      tags:
        - categories
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
            example: "Tien dien"
          description: Ten danh muc
      responses:
        200:
          description: Success
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /categories/edit/{name}:
    put:
      summary: Edit a category name
      tags:
        - categories
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
            example: "Tien dien"
          description: Ten danh muc
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  example: "Tien dien moi"
      responses:
        200:
          description: Success
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /categories:
    get:
      summary: Get all categories
      tags:
        - categories
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        400:
          description: Not Found
        500:
          description: Internal Server Error

  /users:
    get:
      summary: Get a list of all users
      tags:
        - users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account.Detail"
        400:
          description: Not Found
        500:
          description: Internal Server Error

  /users/new:
    post:
      summary: Add a new user
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account.Detail"
      responses:
        200:
          description: New User successfully added
        400:
          description: Not Found
        500:
          description: Internal Server Error

  /users/delete/{id}:
    delete:
      summary: Delete an exist user
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 1915940
          description: Id of a user
      responses:
        200:
          description: Success
        400:
          description: Not Found
        500:
          description: Internal Server Error

  /users/edit/{id}:
    put:
      summary: Edit
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: 1915940
          description: Id of a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account.Detail"
      responses:
        200:
          description: Success
        400:
          description: Not Found
        500:
          description: Internal Server Error

  # PLANNING
  /plannings:
    post:
      summary: Add a new planning
      tags:
        - plannings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Planning.New"

      responses:
        200:
          description: Add new planning successfully
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /plannings/{id}:
    get:
      summary: Get more detail (notes and attachments) of a transaction by given ID
      tags:
        - plannings
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: "#1d34ae"
          description: Planning ID
      responses:
        200:
          description: Get a planning by provided ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Planning.RowData.Addition"
        404:
          description: Not Found
        500:
          description: Internal Server Error
    put:
      summary: Update a planning which has a given ID
      tags:
        - plannings
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: "#1d34ae"
          description: Planning ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Planning.Update"

      responses:
        200:
          description: Update successfully
        404:
          description: Not Found
        500:
          description: Internal Server Error
    delete:
      summary: Delete a planning by given id
      tags:
        - plannings
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: "#1d34ae"
          description: Planning ID
      responses:
        200:
          description: Delete successfully
        404:
          description: Not Found
        500:
          description: Internal Server Error
  
  /plannings?q={query}:
    get:
      summary: Get transaction list by some pre-condition
      tags:
        - plannings
      parameters:
        - in: query
          name: q
          schema:
            $ref: "#/components/schemas/Query"
            default: {}
          required: false
          description: Object of conditions
      responses:
        200:
          description: Retrieve successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Planning.RowData"
        404:
          description: Not Found
        500:
          description: Internal Server Error

  # LOGS
  /logs?q={query}:
    get:
      summary: Get log list by some pre-condition
      tags:
        - logs
      parameters:
        - in: query
          name: q
          schema:
            $ref: "#/components/schemas/Query"
            default: {}
          required: false
          description: Object of conditions
      responses:
        200:
          description: List of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Log"
        404:
          description: Not Found
        500:
          description: Internal Server Error

components:
  schemas:
    Category:
      type: object
      properties:
        name:
          type: string
          example: Tiền điện
        type:
          type: string
          enum: [Thu, Chi]
          example: Thu

    Transaction.New:
      type: object
      description: Data format for create a new transaction
      properties:
        amount:
          type: integer
          format: int64
          example: 300 000
        category:
          $ref: "#/components/schemas/Category"
        userId:
          type: string
          example: 1915940
        note:
          type: string
          example: "Tien dien thang 4"
        attachments:
          type: string
          example: tiendien.jpg

    Transaction.RowData:
      type: object
      description: Data for displaying a transaction on table
      properties:
        id:
          type: string
          example: "#10ac6we"
        user:
          $ref: "#/components/schemas/Account.Basic"
        time:
          type: string
          example: "2022/03/30 06:24:24"
        amount:
          type: number
          example: 300000
        category:
          $ref: "#/components/schemas/Category"

    Transaction.RowData.Addition:
      type: object
      description: Get more details of a transaction
      properties:
        note:
          type: string
          example: "Tien dien thang 4"
        attachments:
          type: array
          items:
            type: string
          example: [ "tiendien.jpg", "anh_giao_dich.png" ]

    Planning.New:
      type: object
      required:
        - category
        - amount
        - startDate
        - isRepeat
      properties:
        category:
          $ref: "#/components/schemas/Category"
        amount:
          type: integer
          example: 2000000
        userId:
          type: string
          example: "#343a40"
        isRepeat:
          type: boolean
          example: true
        startDate:
          type: string
          example: "2022-10-05 15:30"
        repeat:
          $ref: "#/components/schemas/Planning.Repetition"

    Planning.Update:
      type: object
      required:
        - category
        - amount
        - startDate
        - isRepeat
      properties:
        category:
          $ref: "#/components/schemas/Category"
        amount:
          type: integer
          example: 2000000
        userId:
          type: string
          example: "#343a40"
        isRepeat:
          type: boolean
          example: true
        startDate:
          type: string
          example: "2022-10-05 15:30"
        repeat:
          $ref: "#/components/schemas/Planning.Repetition"

    Planning.RowData:
      type: object
      properties:
        id:
          type: string
          example: "#343a40"
        category:
          $ref: "#/components/schemas/Category"
        amount:
          type: integer
          example: 150000
        startDate:
          type: string
          example: "2022-04-07"

    Planning.RowData.Addition:
      type: object
      properties:
        userId:
          type: string
          example: "#343a40"
        isRepeat:
          type: boolean
          example: true
        repeat:
          $ref: "#/components/schemas/Planning.Repetition"
          
    Planning.Repetition:
      type: object
      properties:
        mode:
          type: string
          enum:
            - countdown
            - cycle
          example: cycle
          description: Use to determine which option user has chosen

        cycle:
          type: object
          properties:
            cycle:
              type: string
              enum:
                - day
                - week
                - month
                - quarter
                - year
            endDate:
              type: string
              example: "2022-12-05 15:30"
            hasEndDate:
              type: boolean
              example: false
        countdown:
          type: integer
          example: 10

    User:
      type: object
      description: Display basic personal data of a user
      properties:
        name:
          type: string
          example: Cu Do Thanh Nhan
        accountName:
          type: string
          example: cudothanhnhan
        avatar:
          type: string
          example: "https://cdn.ticklab.com"

    Account.Basic:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            id:
              type: string
              example: 1915940

    Account.Detail:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          description: all information of a user
          properties:
            department:
              type: string
              example: IT
            role:
              type: string
              example: Thành viên
            active:
              type: boolean
              example: true
            dob:
              type: string
              format: date
              example: 2001-6-1
            email:
              type: string
              pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
              example: email@gmail.com
            phone:
              type: string
              pattern: '(84|0[3|5|7|8|9])+([0-9]{8})\b'
              example: "0915654321"
            facebookLink:
              type: string
              example: "https://www.facebook.com/"

    Query:
      type: object
      properties:
        offset:
          type: integer
          default: 0
        limit:
          type: integer
          default: 20
        sort:
          type: string
          enum: ["asc", "desc"]
          default: "desc"
        search:
          type: string
          example: "Tien nha"
        filter:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "amount"
              op:
                type: string
                enum: ["<", ">", "==", "..."]
              rhs:
                type: object
                properties:
                  type:
                    type: string
                    example: "datetime"
                  value:
                    type: string
                    example: '2022-10-05 15:30'

    Log:
      type: object
      required:
        - user
        - time
        - activity
      properties:
        user:
          $ref: "#/components/schemas/Account.Basic"
        time:
          type: string
          example: "2022/02/16 21:06:52"
        activity:
          $ref: "#/components/schemas/Log.Activity"

    Log.Activity:
      type: object
      required:
        - action
        - link
      properties:
        action:
          type: string
          example: Yeu cau giai ngan
        link:
          type: object
          properties:
            name:
              type: string
              example: mua may khoan
            link:
              type: string
              format: url
              example: https://api.tickfund.com/v1/plannings/343a40
    Statistic.Filter:
      type: object
      required:
        - include_planning
        - time_range
        - period
      properties:
        include_planning:
          type: boolean
          example: true
        time_range:
          type: object
          properties:
            start:
              type: string
              example: '2022/02/16'
            end:
              type: string
              example: '2022/07/01'
        period:
          type: string
          enum:
            - week
            - month
            - quarter
          example: month
    
    Statistic.Overview:
      type: object
      properties:
        incomes:
          type: array
          items:
            type: integer
          example: [3000000, 4950000, 3578000]
        expenses:
          type: array
          items:
            type: integer
          example: [156000, 790000, 1230000]

    Statistic.PieChart.Category:
      type: object
      required:
        - category
        - amount
      properties:
        category:
          type: string
          example: "Tien nha"
        amount:
          type: integer
          example: "3000000"

